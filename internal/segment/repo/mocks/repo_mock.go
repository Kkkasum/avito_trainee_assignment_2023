// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"avito_2023/internal/segment/repo"
	"context"
	"sync"
)

// Ensure, that RepoMock does implement repo.Repo.
// If this is not the case, regenerate this file with moq.
var _ repo.Repo = &RepoMock{}

// RepoMock is a mock implementation of repo.Repo.
//
//	func TestSomethingThatUsesRepo(t *testing.T) {
//
//		// make and configure a mocked repo.Repo
//		mockedRepo := &RepoMock{
//			AddSegmentFunc: func(ctx context.Context, slug string, percentage uint) error {
//				panic("mock out the AddSegment method")
//			},
//			DeleteSegmentFunc: func(ctx context.Context, slug string) error {
//				panic("mock out the DeleteSegment method")
//			},
//		}
//
//		// use mockedRepo in code that requires repo.Repo
//		// and then make assertions.
//
//	}
type RepoMock struct {
	// AddSegmentFunc mocks the AddSegment method.
	AddSegmentFunc func(ctx context.Context, slug string, percentage uint) error

	// DeleteSegmentFunc mocks the DeleteSegment method.
	DeleteSegmentFunc func(ctx context.Context, slug string) error

	// calls tracks calls to the methods.
	calls struct {
		// AddSegment holds details about calls to the AddSegment method.
		AddSegment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Slug is the slug argument value.
			Slug string
			// Percentage is the percentage argument value.
			Percentage uint
		}
		// DeleteSegment holds details about calls to the DeleteSegment method.
		DeleteSegment []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Slug is the slug argument value.
			Slug string
		}
	}
	lockAddSegment    sync.RWMutex
	lockDeleteSegment sync.RWMutex
}

// AddSegment calls AddSegmentFunc.
func (mock *RepoMock) AddSegment(ctx context.Context, slug string, percentage uint) error {
	if mock.AddSegmentFunc == nil {
		panic("RepoMock.AddSegmentFunc: method is nil but Repo.AddSegment was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		Slug       string
		Percentage uint
	}{
		Ctx:        ctx,
		Slug:       slug,
		Percentage: percentage,
	}
	mock.lockAddSegment.Lock()
	mock.calls.AddSegment = append(mock.calls.AddSegment, callInfo)
	mock.lockAddSegment.Unlock()
	return mock.AddSegmentFunc(ctx, slug, percentage)
}

// AddSegmentCalls gets all the calls that were made to AddSegment.
// Check the length with:
//
//	len(mockedRepo.AddSegmentCalls())
func (mock *RepoMock) AddSegmentCalls() []struct {
	Ctx        context.Context
	Slug       string
	Percentage uint
} {
	var calls []struct {
		Ctx        context.Context
		Slug       string
		Percentage uint
	}
	mock.lockAddSegment.RLock()
	calls = mock.calls.AddSegment
	mock.lockAddSegment.RUnlock()
	return calls
}

// DeleteSegment calls DeleteSegmentFunc.
func (mock *RepoMock) DeleteSegment(ctx context.Context, slug string) error {
	if mock.DeleteSegmentFunc == nil {
		panic("RepoMock.DeleteSegmentFunc: method is nil but Repo.DeleteSegment was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Slug string
	}{
		Ctx:  ctx,
		Slug: slug,
	}
	mock.lockDeleteSegment.Lock()
	mock.calls.DeleteSegment = append(mock.calls.DeleteSegment, callInfo)
	mock.lockDeleteSegment.Unlock()
	return mock.DeleteSegmentFunc(ctx, slug)
}

// DeleteSegmentCalls gets all the calls that were made to DeleteSegment.
// Check the length with:
//
//	len(mockedRepo.DeleteSegmentCalls())
func (mock *RepoMock) DeleteSegmentCalls() []struct {
	Ctx  context.Context
	Slug string
} {
	var calls []struct {
		Ctx  context.Context
		Slug string
	}
	mock.lockDeleteSegment.RLock()
	calls = mock.calls.DeleteSegment
	mock.lockDeleteSegment.RUnlock()
	return calls
}
